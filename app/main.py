import pandas as pd

# Function to read data from a CSV file
def read_data(file_path):
    """
    Reads the CSV file located at file_path into a pandas DataFrame.
    Returns DataFrame containing the CSV data
    """
    return pd.read_csv(file_path)

# Function to compute monthly revenue
def compute_monthly_revenue(df):
    """
    Computes the total revenue for each month from the DataFrame.
    DataFrame containing order data with 'order_date' and 'product_price' columns
    """
    # Convert 'order_date' column to datetime format
    df['order_date'] = pd.to_datetime(df['order_date'])
    # Extract month and year from 'order_date'
    df['month'] = df['order_date'].dt.to_period('M')
    # Group by 'month' and calculate the sum of 'product_price' for each month
    monthly_revenue = df.groupby('month')['product_price'].sum().reset_index()
    # Rename columns for clarity
    monthly_revenue.columns = ['Month', 'Total Revenue']
    return monthly_revenue

# Function to compute revenue by product
def compute_product_revenue(df):
    """
    Computes the total revenue for each product from the DataFrame.
    returns DataFrame with 'Product Name' and 'Total Revenue' columns
    """
    # Group by 'product_name' and calculate the sum of 'product_price' for each product
    product_revenue = df.groupby('product_name')['product_price'].sum().reset_index()
    # Rename columns for clarity
    product_revenue.columns = ['Product Name', 'Total Revenue']
    return product_revenue

# Function to compute revenue by customer
def compute_customer_revenue(df):
    """
    Computes the total revenue generated by each customer from the DataFrame.
    returns DataFrame with 'Customer ID' and 'Total Revenue' columns
    """
    # Group by 'customer_id' and calculate the sum of 'product_price' for each customer
    customer_revenue = df.groupby('customer_id')['product_price'].sum().reset_index()
    # Rename columns for clarity
    customer_revenue.columns = ['Customer ID', 'Total Revenue']
    return customer_revenue

# Function to get top N customers by revenue
def top_customers_by_revenue(customer_revenue, top_n=10):
    """
    Returns the top N customers based on their total revenue.
    return DataFrame with the top N customers by total revenue
    """
    # Sort customers by 'Total Revenue' in descending order and select the top N customers
    top_customers = customer_revenue.sort_values(by='Total Revenue', ascending=False).head(top_n)
    return top_customers

# Main function to execute the analysis
def main():
    """
    Main function to read data, compute revenue metrics, and print results.
    """
    file_path = 'data.csv'  
    df = read_data(file_path)  
    
    # Compute and print monthly revenue
    monthly_revenue = compute_monthly_revenue(df)
    print("Monthly Revenue:\n", monthly_revenue)
    
    # Compute and print product revenue
    product_revenue = compute_product_revenue(df)
    print("Product Revenue:\n", product_revenue)
    
    # Compute and print customer revenue
    customer_revenue = compute_customer_revenue(df)
    print("Customer Revenue:\n", customer_revenue)
    
    # Compute and print top 10 customers by revenue
    top_customers = top_customers_by_revenue(customer_revenue)
    print("Top 10 Customers:\n", top_customers)

if __name__ == "__main__":
    main()
